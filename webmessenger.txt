import eventlet
import os
from flask import Flask, render_template_string, request, send_from_directory
from flask_socketio import SocketIO, emit
from datetime import datetime
from werkzeug.utils import secure_filename

# Set up upload folder
UPLOAD_FOLDER = os.path.expanduser('~/lan_messenger_uploads')
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
socketio = SocketIO(app, cors_allowed_origins='*')

message_history = []
connected_users = {}
user_count = 0

# HTML + CSS + JS UI
HTML = '''
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>LAN Messenger</title>
  <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Roboto', sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f5f5f5;
      color: #333;
    }
    header {
      background-color: #4a90e2;
      padding: 1em;
      text-align: center;
      color: white;
      font-size: 1.5em;
    }
    .container {
      display: flex;
      gap: 20px;
      padding: 20px;
    }
    .panel {
      background-color: white;
      border-radius: 8px;
      padding: 1em;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .messages {
      width: 60%;
      height: 400px;
      overflow-y: auto;
      border: 1px solid #ccc;
    }
    .users {
      width: 30%;
      height: 400px;
      overflow-y: auto;
      border: 1px solid #ccc;
    }
    .form {
      margin-top: 20px;
      display: flex;
      gap: 10px;
    }
    input[type="text"] {
      flex: 1;
      padding: 0.5em;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    button {
      background-color: #4a90e2;
      color: white;
      border: none;
      padding: 0.5em 1em;
      border-radius: 4px;
      cursor: pointer;
    }
    button:hover {
      background-color: #357ABD;
    }
  </style>
</head>
<body>
  <header>LAN Messenger</header>
  <div class="container">
    <div class="panel messages" id="messages">Loading messages...</div>
    <div class="panel users" id="users">Connecting...</div>
  </div>
  <div class="container">
    <form id="msgform" class="form">
      <input id="msginput" type="text" placeholder="Type your message..." required />
      <button type="submit">Send</button>
    </form>
    <input id="upload" type="file" />
  </div>

  <script>
    const socket = io();
    const msgBox = document.getElementById('messages');
    const userBox = document.getElementById('users');
    const input = document.getElementById('msginput');
    const form = document.getElementById('msgform');
    const upload = document.getElementById('upload');

    let userName = localStorage.getItem('username');
    if (!userName) {
      userName = prompt("Enter your name or ID:") || "Unknown";
      localStorage.setItem('username', userName);
    }
    socket.emit('set_name', userName);

    form.addEventListener('submit', function (e) {
      e.preventDefault();
      const msg = input.value.trim();
      if (msg) {
        socket.emit('send_message', { name: userName, message: msg });
        input.value = '';
      }
    });

    upload.addEventListener('change', function () {
      const file = upload.files[0];
      if (!file) return;

      const formData = new FormData();
      formData.append('file', file);
      formData.append('from', userName);

      fetch('/upload', {
        method: 'POST',
        body: formData
      }).then(res => {
        if (res.ok) console.log('File uploaded');
      });
    });

    socket.on('connect', () => console.log('✅ Connected'));

    socket.on('history', function (messages) {
      msgBox.innerHTML = '';
      messages.forEach(msg => {
        const div = document.createElement('div');
        div.innerHTML = msg;
        msgBox.appendChild(div);
      });
    });

    socket.on('message', function (data) {
      const div = document.createElement('div');
      div.innerHTML = data;
      msgBox.appendChild(div);
      while (msgBox.children.length > 20) {
        msgBox.removeChild(msgBox.firstChild);
      }
    });

    socket.on('users', function (userList) {
      userBox.innerHTML = '';
      userList.forEach(user => {
        const div = document.createElement('div');
        div.innerText = user;
        userBox.appendChild(div);
      });
    });
  </script>
</body>
</html>
'''

@app.route('/')
def index():
    return render_template_string(HTML)

@app.route('/upload', methods=['POST'])
def upload():
    file = request.files['file']
    sender = request.form.get('from', 'Anonymous')
    if file:
        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)

        file_url = f"/uploads/{filename}"
        timestamp = datetime.now().strftime("%I:%M %p")
        file_msg = f"[{timestamp}] {sender} shared a file: <a href='{file_url}' target='_blank'>{filename}</a>"

        message_history.append(file_msg)
        if len(message_history) > 20:
            message_history.pop(0)
        socketio.emit('message', file_msg)
    return "OK"

@app.route('/uploads/<path:filename>')
def uploaded_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

@app.route('/send', methods=['POST'])
def send():
    name = request.form.get('from', 'System')
    msg = request.form.get('message', '')
    timestamp = datetime.now().strftime("%I:%M %p")
    full_message = f"[{timestamp}] {name}: {msg}"

    print(f"📤 {full_message}")
    message_history.append(full_message)
    if len(message_history) > 20:
        message_history.pop(0)
    socketio.emit('message', full_message)
    return f"Sent: {full_message}"

@socketio.on('set_name')
def handle_set_name(name):
    global user_count
    ip = request.remote_addr
    if ip not in connected_users:
        user_count += 1
        default_name = f"User #{user_count}"
        username = name.strip() if name.strip() else default_name
        connected_users[ip] = username
        print(f"🟢 {username} connected from {ip}")
    else:
        print(f"🔁 {connected_users[ip]} reconnected from {ip}")

    emit('history', message_history)
    broadcast_user_list()

@socketio.on('disconnect')
def handle_disconnect():
    print(f"🔌 Disconnection detected — IP tracking in use (no removal)")

def broadcast_user_list():
    socketio.emit('users', list(connected_users.values()))

@socketio.on('send_message')
def handle_send_message(data):
    name = data.get('name', 'Anonymous')
    msg = data.get('message', '')
    timestamp = datetime.now().strftime("%I:%M %p")
    full_message = f"[{timestamp}] {name}: {msg}"
    print(f"💬 {full_message}")
    message_history.append(full_message)
    if len(message_history) > 20:
        message_history.pop(0)
    socketio.emit('message', full_message)

if __name__ == '__main__':
    print("🚀 LAN Messenger running with messaging + file upload + user tracking")
    socketio.run(app, host='0.0.0.0', port=5000)

